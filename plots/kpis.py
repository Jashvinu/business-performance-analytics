import pandas as pd
import plotly.graph_objects as go
from constants import MONTHS


def indicator_chart(label, current_value, delta_value, y_data, trace_name,
                    x_data=None, prefix=None, suffix=None):
    """
    Generates a Plotly indicator chart with a provided number, delta, and line plot.

    :param label: The label for the indicator chart.
    :param current_value: The current value to be displayed in the chart.
    :param delta_value: The reference value for calculating the delta.
    :param y_data: The y-axis data for the line plot.
    :param trace_name: The name of the trace for the line plot.
    :param x_data: The x-axis data for the line plot (optional).
    :param prefix: The prefix to be displayed with the number (optional).
    :param suffix: The suffix to be displayed with the number (optional).
    :return: A Plotly Figure object containing the indicator chart.
    """
    # Check if current_value is 0, NaN, or NaT, and set it to 0 if true
    if current_value in [0, 0.0] or pd.isna(current_value):
        current_value = 0

    # Check if delta_value is 0, NaN, or NaT, and set it to 0 if true
    if delta_value in [0, 0.0] or pd.isna(delta_value):
        delta_value = 0

    # Create an indicator trace for the current value and delta
    fig = go.Figure(go.Indicator(
        mode="number+delta",
        value=current_value,
        number={"prefix": prefix, "suffix": suffix},
        delta={"reference": delta_value, "valueformat": ".1f",
               "prefix": prefix, "suffix": suffix},
        title={"text": label, "font": {"size": 20}},
        domain={'y': [0, 1], 'x': [0.25, 0.75]}
    ))

    # Add a line plot trace for the y_data and x_data
    fig.add_trace(
        go.Scatter(x=x_data, y=y_data, mode="lines",
                   fill='tozeroy', name=trace_name)
    )

    # Update axes to hide tick labels and grid lines
    fig.update_xaxes(showticklabels=False, showgrid=False)
    fig.update_yaxes(showticklabels=False, showgrid=False)

    # Update the layout of the figure for better appearance
    fig.update_layout(height=250, hovermode="x unified",
                      hoverlabel=dict(
                          bgcolor="white", font_color="black", font_size=16, font_family="Rockwell")
                      )

    return fig


def get_num_of_customers(current_data: pd.DataFrame, previous_data: pd.DataFrame) -> go.Figure:
    """
    Generates a Plotly indicator chart showing the number of unique customers.

    :param current_data: DataFrame containing the current customer data.
                         with columns "Customer_ID" and "Valuation Date".
    :param previous_data: DataFrame containing the previous customer data.
                          with columns "Customer_ID".
    :return: A Plotly Figure object containing the indicator chart.
    """

    # Number of unique customers in the current data(period)
    current_value = current_data["Customer_ID"].nunique()
    # Number of unique customers in the previous data(period)
    previous_value = previous_data["Customer_ID"].nunique()
    # getting unique customer count for current period
    y_data = current_data.groupby("Valuation Date")[
        "Customer_ID"].nunique().reset_index()
    # extracting month
    y_data['Month'] = y_data['Valuation Date'].dt.month
    # aggregating by month to get total number of customers in given month
    y_data = y_data.groupby("Month")["Customer_ID"].sum().reset_index()
    # converting month number to name
    y_data['Month'] = y_data['Month'].apply(lambda x: MONTHS[x - 1])
    # indicator chart with scatter-line chart in bg for monthly trend
    fig = indicator_chart(label="Number of Customers", current_value=current_value, delta_value=previous_value,
                          x_data=y_data["Month"], y_data=y_data["Customer_ID"], trace_name="# Customers")
    return fig


def get_clv(current_data: pd.DataFrame, previous_data: pd.DataFrame) -> go.Figure:
    """
    Generates a Plotly indicator chart showing the Customers' lifetime value.

    :param current_data: DataFrame containing the current customer data.
                         with columns "Customer_ID" and "Valuation Date" & "CLTV Monetary Value".
    :param previous_data: DataFrame containing the previous customer data.
                          with columns "Customer_ID" and "Valuation Date" & "CLTV Monetary Value".
    :return: A Plotly Figure object containing the indicator chart.
    """
    # Calculating the total monetary value generated by each customer.
    current = current_data.groupby(['Customer_ID'])[
        'CLTV Monetary Value'].sum()
    # Averaging it across the data
    current = current.mean()
    # monetary value of each customer in previous period/data (for reference purpose)
    previous = previous_data.groupby(['Customer_ID'])[
        'CLTV Monetary Value'].sum()
    # averaging the CLTV Monetary value of previous period
    previous = previous.mean()
    # Aggregating the CLTV monetary value of customers' w.r.t Date
    y_data = current_data.groupby("Valuation Date")[
        "CLTV Monetary Value"].sum().reset_index()
    # Adding Month
    y_data['Month'] = y_data['Valuation Date'].dt.month
    # Getting monthly trend
    y_data = y_data.groupby(
        "Month")["CLTV Monetary Value"].mean().reset_index()
    y_data['Month'] = y_data['Month'].apply(lambda x: MONTHS[x - 1])
    # indicator chart with CLTV Monetary Value for current period and monthly trend in the bg
    fig = indicator_chart(label="Customer Lifetime Value", current_value=current, delta_value=previous,
                          x_data=y_data["Month"], y_data=y_data["CLTV Monetary Value"],
                          prefix="$", trace_name="CLV"
                          )
    return fig


def average_life_span(current_data: pd.DataFrame, previous_data: pd.DataFrame) -> go.Figure:
    """
    Generates a Plotly indicator chart showing the Customers' average lifespan.

    :param current_data: DataFrame containing the current customer data.
                         with columns "Customer_ID" and "Valuation Date"
    :param previous_data: DataFrame containing the previous customer data.
                          with columns "Customer_ID" and "Valuation Date"
    :return: A Plotly Figure object containing the indicator chart.
    """
    # Calculating the first and last day(Active) for a Customer
    cust_lsp_current = current_data.groupby(
        'Customer_ID')['Valuation Date'].agg(['min', 'max']).reset_index()
    # lifespan of each customer as the difference between the first and last active date
    cust_lsp_current['lifespan'] = cust_lsp_current['max'] - \
        cust_lsp_current['min']
    # lifespan as the number of days
    cust_lsp_current['lifespan'] = cust_lsp_current['lifespan'].apply(
        lambda x: x.days)
    # Calculate the average lifespan of the customers for current period
    avg_lsp_current = cust_lsp_current['lifespan'].mean()
    # Calculating the lifespan of customers for previous period
    cust_lsp_prev = previous_data.groupby('Customer_ID')['Valuation Date'].agg([
        'min', 'max']).reset_index()
    cust_lsp_prev['lifespan'] = cust_lsp_prev['max'] - cust_lsp_prev['min']
    cust_lsp_prev['lifespan'] = cust_lsp_prev['lifespan'].apply(
        lambda x: x.days)
    # average lifespan of the customers for previous period
    avg_lsp_prev = cust_lsp_prev['lifespan'].mean()
    # Merging the customer lifespan data with the current period data on 'Customer_ID'
    cust_lsp_current = cust_lsp_current.merge(current_data, on="Customer_ID")
    # Aggregating by 'Valuation Date' and calculating the average lifespan for each date
    y_data = cust_lsp_current.groupby("Valuation Date")[
        "lifespan"].mean().reset_index()
    # Extracting the month from the 'Valuation Date'
    y_data["Month"] = y_data["Valuation Date"].dt.month
    # Grouping by month and calculate the average lifespan for each month
    y_data = y_data.groupby("Month")["lifespan"].mean().reset_index()
    # Month numbers to month names using the MONTHS list
    y_data['Month'] = y_data['Month'].apply(lambda x: MONTHS[x - 1])
    # indicator chart with the average lifespan data
    fig = indicator_chart(label="Average Life Span", current_value=avg_lsp_current, delta_value=avg_lsp_prev,
                          x_data=y_data["Month"], y_data=y_data["lifespan"], suffix=" days",
                          trace_name="Avg. Lifespan")
    return fig


def average_arpu(current_data: pd.DataFrame, previous_data: pd.DataFrame) -> go.Figure:
    """
    Generates a Plotly indicator chart showing the average revenue per user.

    :param current_data: DataFrame containing the current customer data.
                         with columns "Customer_ID" and "Valuation Date" & "Total Revenue".
    :param previous_data: DataFrame containing the previous customer data.
                          with columns "Customer_ID" and "Valuation Date" & "Total Revenue".
    :return: A Plotly Figure object containing the indicator chart.
    """
    print("Available columns:", current_data.columns.tolist())
    # Calculating the current period's Average Revenue Per User (ARPU)
    current_arpu = current_data["Total Revenue_y"].sum(
    ) / current_data['Customer_ID'].nunique()
    # Calculating the previous period's Average Revenue Per User (ARPU)
    previous_arpu = previous_data["Total Revenue_y"].sum(
    ) / previous_data['Customer_ID'].nunique()
    # Grouping by 'Valuation Date' for 'Total Revenue_y' and the number of unique 'Customer_ID'
    arpu_data = current_data.groupby("Valuation Date").agg(
        {'Total Revenue_y': 'sum', 'Customer_ID': 'nunique'}
    ).reset_index()
    # ARPU for each 'Valuation Date'
    arpu_data["arpu"] = arpu_data["Total Revenue_y"] / arpu_data["Customer_ID"]
    # Month from the 'Valuation Date'
    arpu_data["Month"] = arpu_data["Valuation Date"].dt.month
    # Grouping by month to get monthly trend for ARPU
    arpu_data = arpu_data.groupby("Month")["arpu"].mean().reset_index()
    # Month numbers to month names using the MONTHS list
    arpu_data['Month'] = arpu_data['Month'].apply(lambda x: MONTHS[x - 1])
    # indicator chart with the ARPU data
    fig = indicator_chart(label="Average ARPU", current_value=current_arpu, delta_value=previous_arpu,
                          x_data=arpu_data["Month"], y_data=arpu_data["arpu"], prefix="$",
                          trace_name="Total Revenue")
    return fig


def churn_rate(current_data: pd.DataFrame, previous_data: pd.DataFrame) -> go.Figure:
    """
    Generates a Plotly indicator chart showing the customers' churn rate.

    :param current_data: DataFrame containing the current customer data.
                         with columns "Customer_ID", "Valuation Date", and "P notAlive".
    :param previous_data: DataFrame containing the previous customer data.
                          with columns "Customer_ID", "Valuation Date", and "P notAlive".
    :return: A Plotly Figure object containing the indicator chart.
    """
    # Churn status for current period based on 'P notAlive' probability
    current_data["churn"] = current_data["P notAlive"].apply(
        lambda x: 1 if x > 0.5 else 0)
    # Churn status for previous period
    previous_data["churn"] = previous_data["P notAlive"].apply(
        lambda x: 1 if x > 0.5 else 0)
    # Average churn rate for the current period
    current_churn = current_data["churn"].mean()
    # Average churn rate for the previous period
    previous_churn = previous_data["churn"].mean()
    # Calculating the total churn for each date
    churn_data = current_data.groupby("Valuation Date")[
        "churn"].sum().reset_index()
    # Extracting the month from the 'Valuation Date'
    churn_data["Month"] = churn_data["Valuation Date"].dt.month
    # Average churn rate for each month
    churn_data = churn_data.groupby("Month")["churn"].mean().reset_index()
    # Month numbers to month names using the MONTHS list
    churn_data['Month'] = churn_data['Month'].apply(lambda x: MONTHS[x - 1])
    # Indicator chart with the churn rate data
    fig = indicator_chart(label="Churn Rate", current_value=current_churn * 100,
                          delta_value=previous_churn * 100, suffix="%",
                          x_data=churn_data["Month"], y_data=churn_data["churn"],
                          trace_name="churn")
    return fig
